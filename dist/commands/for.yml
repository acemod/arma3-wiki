name: for
description: |-
  This operator creates a [[For Type]] which is used in the for-constructs.
  {{Feature|warning|
  The alternative syntax <sqf inline>for _array do _code</sqf> is [[Code Optimisation#for|slower]] than the first syntax because the condition is checked in every iteration, and it has a few bugs.<br>
  It is only kept for backward compatibility; always use the first syntax <sqf inline>for "_i" from 0 to _end do _code</sqf>.
  }}
problem_notes:
- |-
  {{Feature|arma2|There is an [[:Category:Arma 2|{{arma2}}]] issue (not present in {{Name|arma2oa|short}} nor in {{arma3}}) where having a capital letter in the variable name '''will''' throw an error:
  <sqf>
  for "_i" from 0 to 2 do { hintSilent str _i; }; // works
  for "_I" from 0 to 2 do { hintSilent str _I; }; // "variable _i is not defined" error
  </sqf>
  }}
groups:
- Program Flow
syntax:
- call: !Unary arguments
  ret:
  - ForType
  - null
  params:
  - name: arguments
    description: declares the index variable name like "_myVar". [[from]] and [[to]] are required, [[step]] is optional.
    typ: String
- call: !Unary
  - init
  - condition
  - codeToExecute
  ret:
  - ForType
  - null
  params:
  - name: init
    description: loop variable definition
    typ: Code
  - name: condition
    description: '[[call]]ed code returns [[false]], leave the [[for]]-loop'
    typ: Code
  - name: codeToExecute
    description: code to be run on each loop
    typ: Code
argument_loc: Unspecified
effect_loc: Unspecified
since:
  armed_assault:
    major: 1
    minor: 0
  arma_2:
    major: 1
    minor: 0
  arma_2_arrowhead:
    major: 1
    minor: 50
  take_on_helicopters:
    major: 1
    minor: 0
  arma_3:
    major: 0
    minor: 50
examples:
- |
  // will output 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 (the to value being inclusive)
  for "_i" from 1 to 10 do { systemChat str _i; };
- |
  // will output 9, 7, 5, 3, 1
  for "_i" from 9 to 1 step -2 do { systemChat str _i; };
- |
  // will output 0, 1, 2, 3, 4, 5, 6, 7, 8, 9
  for [{ _i = 0 }, { _i < 10 }, { _i = _i + 1 }] do { systemChat str _i };
- |
  // BAD CODE
  _i = 100;
  for [{ _i = 0 }, { _i < 5 }, { _i = _i + 1 }] do { /* code */ };
  hint str _i; // 5

  // GOOD CODE (private keyword is recommended)
  _i = 100;
  for [{ private _i = 0 }, { _i < 5 }, { _i = _i + 1 }] do { /* code */ };
  hint str _i; // 100

  // BEST CODE (primary syntax, fastest)
  _i = 100;
  for "_i" from 0 to 4 do { /* code */ };
  hint str _i; // 100
