name: privateAll
description: |-
  Disables the implicit inheritance of local variables, as defined in the parent scope.<br>
  By default, any local variables defined in a parent scope are available to the lower scope code.<br>
  After using [[privateAll]], parent scope variables can no longer be accessed implicitly. However, it is still possible to explicitly access parent scope variables using the [[import]] command.
groups:
- Variables
syntax:
- call: Nular
  ret:
  - Nothing
  - null
  params: []
argument_loc: Unspecified
effect_loc: Unspecified
since:
  arma_3:
    major: 2
    minor: 18
examples:
- "<sqf>\n_a = 1;\n_b = 2;\n_c = 3;\n4 call {\n\t// _a, _b and _c from the parent scope are accessible at this point\n\tsystemChat str [_a, _b, _c]; \t\t\t// prints [1, 2, 3]\n\tprivateAll; \t\t\t\t\t\t\t// _a, _b and _c from the parent scope can no longer be accessed\n\tsystemChat str [_a, _b, _c]; \t\t\t// prints [Any, Any, Any]\n\timport [\"_a\", \"_b\"]; \t\t\t\t\t// _a and _b are now defined as private variables in the current scope; _c is still not defined\n\tsystemChat str [_a, _b, _c, _this]; \t// prints [1, 2, Any, 4]\n\t_a = _a + 1; \t\t\t\t\t\t\t// changes the private _a variable in the current scope, but doesn't change the parent scope _a\n};\nsystemChat str _a; // _a is still 1\n</sqf>"
- "<sqf>\nprivate _a = /* ... */;\nprivate _b = /* ... */;\nprivate _c = /* ... */;\n\n{\n\t_x call {\n\t\tprivateAll;\n\t\timport [\"_a\", \"_b\"];\n\t\tcall _this;\n\t};\n} forEach CustomEventHandlers;\n</sqf>\n\n# Because of the [[import]]-statement, code from <var>CustomEventHandlers</var> can use <var>_a</var> and <var>_b</var> without using [[params]] (even if <var>_a</var> and <var>_b</var> were provided via <sqf inline>_this</sqf>, which is not the case here).\n# Code from <var>CustomEventHandlers</var> can only see <var>_a</var> and <var>_b</var>, but no other variables such as <var>_c</var>, <sqf inline>_x</sqf> or <sqf inline>_forEachIndex</sqf>.\n# Code from <var>CustomEventHandlers</var> can modify <var>_a</var> and <var>_b</var> (e.g. <sqf inline>_a = _b / 2</sqf>), but only within its own scope (i.e. <sqf inline>CustomEventHandlers # (n + 1)</sqf> will not see any changes that <sqf inline>CustomEventHandlers # n</sqf> may have made to <var>_a</var> and <var>_b</var>).\n# The values of <var>_a</var>, <var>_b</var> and <var>_c</var> after the [[forEach]]-loop are guaranteed to be the same as before the [[forEach]]-loop.\n\n{{Feature|important|There is one important exception to points 3 and 4: Modifications by reference (e.g. <sqf inline>_a pushBack 123</sqf> where <var>_a</var> is an [[Array]]) are applied in all scopes. This can be avoided by copying <var>_a</var> before calling the <var>CustomEventHandlers</var> code:\n<spoiler text=\"Show Code\">\n<sqf>\nprivate _a = [/* ... */]; // Note that _a is an array.\nprivate _b = /* ... */;\nprivate _c = /* ... */;\n\n{\n\t_x call {\n\t\tprivateAll;\n\t\timport [\"_a\", \"_b\"];\n\t\t_a = +_a; // Copy the array so that the code from CustomEventHandlers can no longer modify the original array.\n\t\tcall _this;\n\t};\n} forEach CustomEventHandlers;\n</sqf></spoiler>}}"
