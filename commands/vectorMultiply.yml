name: vectorMultiply
description: |-
  Multiplies an array of numbers by a scalar or another array of numbers.<br>
  {{Feature|GVI|arma3|2.14|Since {{GVI|arma3|2.14|size= 0.75}} any count of numbers is valid, if one array is larger than the other, the remaining elements are inserted without change.<br>
  Before {{GVI|arma3|2.14|size= 0.75}}, the first argument had to be vector 3D, or {{GVI|arma3|2.00|size= 0.75}} 2D (Which still returned 3D result, with z coordinate defaulted to 0)}}
groups:
- Math - Vectors
syntax:
- call: !Binary
  - numArray
  - multiplier
  ret:
  - ArrayUnknown
  - null
  params:
  - name: numArray
    description: an array of any size to be multiplied with the multiplier
    type: ArrayUnknown
  - name: multiplier
    type: Unknown
argument_loc: Unspecified
effect_loc: Unspecified
since:
  arma_3:
    major: 1
    minor: 22
examples:
- <sqf>_newVector = [1,2,3] vectorMultiply 3; // returns [3,6,9]</sqf>
- "<sqf>\n[1,2,3,4] vectorMultiply [1,2,3,4];\t// [1,4,9,16]\n[1,2,3,4] vectorMultiply 2;\t\t\t// [2,4,6,8]\n[1,2,3,4] vectorMultiply [2];\t\t// [2,2,3,4]\n[2] vectorMultiply [1,2,3,4];\t\t// [2,2,3,4]\n[1,2,3] vectorMultiply [1,2,3,4,5];\t// [1,4,9,4,5]\n</sqf>"
- "<sqf>\nprivate _eyePos = eyePos player;\nprivate _eyeDir = getCameraViewDirection player;\t// this is a normalized vector, i.e. its magnitude is 1\nprivate _100mFurther = _eyeDir vectorMultiply 100;\t// since _eyeDir is normalised (length = 1m), multiplying it by 100 means 100m in that direction\nprivate _lookPos = _eyePos vectorAdd _100mFurther;\t// the position where player is looking 100m ahead\n</sqf>"
- "<sqf>\n// Override firing to throw the player towards where he's aiming\nplayer allowDamage false;\nplayer addAction [\"\", {\n\tplayer setVelocity ((player weaponDirection \"\") vectorMultiply 20);\n}, \"\", 0, false, true, \"DefaultAction\"];\n</sqf>"
