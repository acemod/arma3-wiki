name: remoteExec
description: |-
  Asks the server to execute the given function or script command on the given target machine(s).
  * Functions are executed in the [[Scheduler#Scheduled Environment|scheduled environment]]; suspension is allowed.
  * Script commands are executed in the [[Scheduler#Unscheduled Environment|unscheduled environment]]; suspension is not allowed (see {{Link|#Example 7}}).

  Read [[Arma 3: Remote Execution]] for more information about remote execution, security features and JIP techniques.

  {{Feature|informative|[[remoteExec]]/[[remoteExecCall]] can be used in single player as well, as it is considered as player-hosted multiplayer.}}

  {{Feature|important|The direct execution of [[call]] or [[spawn]] via [[remoteExec]] (or [[remoteExecCall]]) should be avoided to prevent issues in cases where the remote execution of [[call]] or [[spawn]] is blocked by [[Arma 3: CfgRemoteExec|CfgRemoteExec]]. It is instead recommended to create a function to be itself remote-executed.}}

  {{Feature|warning|The order of persistent remote execution for JIP players is not guaranteed, i.e. the order in which multiple calls are added is not necessarily the order they will be executed for joining player.}}
multiplayer_note: Remote executions are queued and are therefore executed in the same order on remote clients (see {{Link|#Example 8}}).
groups:
- Multiplayer
syntax:
- call: !Binary
  - params
  - - order
    - targets
    - JIP
  ret:
  - Unknown
  - |-
    In case of error.
    * [[String]] - In case of success (see [[remoteExecutedJIPID]]).
    ** If the '''JIP''' parameter was [[false]] or an empty string, the return value is "".
    ** If the '''JIP''' parameter was [[true]] or a custom JIP ID, the JIP ID is returned.
    ** If the '''JIP''' parameter was an [[Object]], a [[Group]] or a [[netId]], the (corresponding) [[netId]] is returned.
  params:
  - name: params
    description: '''''order''''''s parameter {{Feature|important|[[Structured Text]] is ''''''not'''''' meant to be sent over network.}}'
    type: Unknown
  - name: order
    description: 'function or command name; while any function or command can be used here, only those allowed by [[Arma 3: CfgRemoteExec|CfgRemoteExec]] will actually be executed'
    type: String
  - name: targets
    type: Unknown
    optional: true
    default: '0'
  - name: JIP
    type: Unknown
    optional: true
    default: '[[false]]'
- call: !Unary
  - functionName
  - targets
  - JIP
  ret:
  - Unknown
  - see the main syntax above for more details.
  params:
  - name: functionName
    description: see the main syntax above for more details.
    type: String
  - name: targets
    description: see the main syntax above for more details.
    type: Unknown
    optional: true
    default: '0'
  - name: JIP
    description: see the main syntax above for more details.
    type: Unknown
    optional: true
    default: '[[false]]'
argument_loc: Unspecified
effect_loc: Unspecified
since:
  arma_3:
    major: 1
    minor: 50
examples:
- |-
  How to write [[remoteExec]]/[[remoteExecCall]] with arguments - note the colours:
  <code style="display: block">{{Color|darkorange|hint}} {{Color|teal|"Hello"}};
  {{cc|becomes}}
  [{{Color|teal|"Hello"}}] remoteExec ["{{Color|darkorange|hint}}"];
  {{Color|teal|"Hello"}} remoteExec ["{{Color|darkorange|hint}}"]; {{cc|alternatively}}</code>

  <code style="display: block">{{Color|green|unit1}} {{Color|darkorange|setFace}} {{Color|teal|"Miller"}};
  {{cc|becomes}}
  [{{Color|green|unit1}}, {{Color|teal|"Miller"}}] remoteExec ["{{Color|darkorange|setFace}}"];</code>

  <code style="display: block">{{Color|darkorange|cutRsc}} {{Color|darkred|["", "BLACK OUT"]}};
  {{cc|becomes}}
  [{{Color|darkred|["", "BLACK OUT"]}}] remoteExec ["{{Color|darkorange|cutRsc}}"]; {{cc|double brackets are needed as the unary command takes an array}}</code>

  <code style="display: block">{{cc|functions, however, do not need double squared brackets}}
  {{Color|teal|["line 1", "line 2"]}} spawn {{Color|darkorange|BIS_fnc_infoText}};
  {{cc|becomes}}
  {{Color|teal|["line 1", "line 2"]}} remoteExec ["{{Color|darkorange|BIS_fnc_infoText}}"];
  </code>
- "send an order to specific machines:\n<sqf>\n\"message\" remoteExec [\"hint\"];\t\t\t\t\t// sends a hint message to everyone\n\"message\" remoteExec [\"hint\", 0];\t\t\t\t// sends a hint message to everyone, identical to \"message\" remoteExec [\"hint\"]\n\"message\" remoteExec [\"hint\", -2];\t\t\t\t// sends a hint message to everybody but the server (also not hosted server)\n\"message\" remoteExec [\"hint\", myCar];\t\t\t// sends a hint message where myCar is local\n\"message\" remoteExec [\"hint\", -clientOwner];\t// sends a hint message to everybody but the current machine\n</sqf>"
- |-
  Add statements to the JIP queue:
  <sqf>
  private _jipId = ["mission state: the car is broken"] remoteExec ["systemChat", 0, true]; // adds the hint to the JIP queue and returns the JIP queue order id
  waitUntil { canMove _car };
  remoteExec ["", _jipId]; // the systemChat order is removed from the JIP queue
  </sqf>

  <sqf>
  ["mission state: the car is broken"] remoteExec ["systemChat", 0, _queueObject];
  // ...
  remoteExec ["", _queueObject]; // the order attached to _queueObject is removed
  </sqf>

  <sqf>
  private _jipId = ["mission state: the car is broken"] remoteExec ["systemChat", 0, "MY_JIP_ID"]; // _jipId is actually "MY_JIP_ID" now
  waitUntil { canMove _car };
  ["mission state: the car is repaired"] remoteExec ["systemChat", 0, "MY_JIP_ID"]; // this order replaces the previous one
  // ...
  remoteExec ["", "MY_JIP_ID"]; // the "MY_JIP_ID" order is removed from the JIP queue
  </sqf>
- |-
  Some more complex examples:
  <sqf>
  ["Open", true] remoteExec ["BIS_fnc_arsenal", MyTargetPlayer];
  [MyCurator, [[MyObject1, MyObject2], false]] remoteExec ["addCuratorEditableObjects", 2];
  </sqf>
- "A tricky example: executing <sqf inline>player setAmmo [primaryWeapon player, 1];</sqf> (on machines where the player is in MyGroup):\n<sqf>\n[player, [primaryWeapon player, 1]] remoteExec [\"setAmmo\", MyGroup];\t\t\t// WRONG:\tthe local player object is used here!\n[{ player setAmmo [primaryWeapon player, 1]; }] remoteExec [\"call\", MyGroup];\t// CORRECT:\tthe remote player object is used here\n</sqf>"
- "'''[[Multiplayer Scripting]] \"performance trick\"'''<br>\nThis <sqf inline>[0, -2] select isDedicated</sqf> check is worth it to avoid '''function''' server-side calculations only. See also {{Link|#Example 9}} for an advanced solution.\n<sqf>\n[\"message\"] remoteExec [\"BIS_fnc_infoText\"];\t\t\t\t\t\t\t\t// not ideal - the function will still run on the dedicated server for nothing\n[\"message\"] remoteExec [\"BIS_fnc_infoText\", [0, -2] select isDedicated];\t// ideal - the dedicated server will not run the code, a player-hosted server will\n\n[\"message\"] remoteExec [\"hint\", [0, -2] select isDedicated];\t// the check is too expensive to be worthy - it becomes worthy if the server logs an RPT warning\n[\"message\"] remoteExec [\"hint\"];\t\t\t\t\t\t\t\t// the (dedicated) server will automatically ditch hint usage due to it not having an interface\n\nprivate _allPlayersTarget = [0, -2] select isDedicated;\t\t\t// caching the result for multiple usages makes it worthy - think of {{Link|Arma 3: Headless Client|headless clients}} as well\n[\"message 1\"] remoteExec [\"hint\", _allPlayersTarget];\n[\"message 2\"] remoteExec [\"hint\", _allPlayersTarget];\n</sqf>\n{{Feature|informative|See {{Link|#Example 9}} below for an advanced example.}}"
- |-
  As said in the description: '''commands''' will be executed in an [[Scheduler#Unscheduled Environment|unscheduled environment]]
  <sqf>[{ sleep 1 }] remoteExec ["call"]; // will throw an error: it is forbidden to use sleep (or waitUntil, etc) in unscheduled environment</sqf>
- |-
  <sqf>
  "Message 1" remoteExec ["systemChat"];
  "Message 2" remoteExec ["systemChat"];
  // will result in
  // "Message 1"
  // "Message 2"
  // in this exact order on clients
  </sqf>
- "It is possible to create a \"to all players\" remote exec target variable:\n<sqf>\nif (isServer) then\n{\n\tTO_ALL_PLAYERS = [0, -2] select isDedicated;\n\tpublicVariable \"TO_ALL_PLAYERS\";\n};\n</sqf>\n<spoiler text=\"Show HC-compatible version\">\nIf {{Link|Arma 3: Headless Client|Headless Clients}} are involved:\n<sqf>\nif (isServer) then\n{\n\tTO_ALL_PLAYERS = [0, -2] select isDedicated;\n\n\tprivate _allNegativeHCs = allPlayers apply { getPlayerID _x } select { _x != \"-1\" }\t// all valid playerIDs\n\t\tapply { getUserInfo _x } select { _x select 7 }\t\t\t\t\t\t\t\t\t// filter by HC\n\t\tapply { -(_x select 1) };\t\t\t\t\t\t\t\t\t\t\t\t\t\t// get negative network ID\n\n\tif (_allNegativeHCs isNotEqualTo []) then\n\t{\n\t\tTO_ALL_PLAYERS = [TO_ALL_PLAYERS] + _allNegativeHCs;\n\t};\n\n\tpublicVariable \"TO_ALL_PLAYERS\";\n\n\taddMissionEventHandler [\"OnUserConnected\", {\n\t\tparams [\"_networkId\"];\n\t\tprivate _userInfo = getUserInfo _networkId;\n\t\tif !(_userInfo select 7) exitWith {};\t// not a HC\n\n\t\tif (TO_ALL_PLAYERS isEqualType 0) then\t// number to array conversion\n\t\t{\n\t\t\tif (TO_ALL_PLAYERS == 0) then\t\t// player-hosted\n\t\t\t{\n\t\t\t\tTO_ALL_PLAYERS = [-(_userInfo select 1)];\n\t\t\t}\n\t\t\telse\t\t\t\t\t\t\t\t// -2, dedicated server\n\t\t\t{\n\t\t\t\tTO_ALL_PLAYERS = [TO_ALL_PLAYERS, -(_userInfo select 1)];\n\t\t\t};\n\t\t}\n\t\telse\t\t\t\t\t\t\t\t\t// already an array\n\t\t{\n\t\t\tTO_ALL_PLAYERS pushBackUnique -(_userInfo select 1);\n\t\t};\n\n\t\tpublicVariable \"TO_ALL_PLAYERS\";\n\t}];\n};\n</sqf>\n</spoiler>\n<sqf>\n// client or server will always target the good machines\n[\"Yay!\"] remoteExec [\"hint\", TO_ALL_PLAYERS];\n</sqf>"
