name: a_%26%26_b
description: |-
  Returns [[true]] only if both conditions are [[true]].
  In case of the alternative syntax, {{Link|https://en.wikipedia.org/wiki/Lazy_evaluation#Control_structures|lazy evaluation}} is used - if left operand is [[false]], evaluation of the right side is ignored.
alias:
- '[[a and b]]'
groups:
- Variables
- Math
syntax:
- call: !Binary
  - booleanA
  - booleanB
  ret:
  - Boolean
  - null
  params:
  - name: booleanA
    description: test condition or variable
    type: Unknown
  - name: booleanB
    description: test condition or variable
    type: Unknown
- call: !Binary
  - boolean
  - code
  ret:
  - Boolean
  - null
  params:
  - name: boolean
    description: test condition or variable
    type: Unknown
  - name: code
    description: code that once executed returns a [[Boolean]]. The code is not evaluated if '''boolean''' is [[false]].
    type: Unknown
  since:
    arma_2_arrowhead:
      major: 1
      minor: 62
argument_loc: Unspecified
effect_loc: Unspecified
since:
  flashpoint:
    major: 1
    minor: 0
  flashpoint_elite:
    major: 1
    minor: 0
  armed_assault:
    major: 1
    minor: 0
  arma_2:
    major: 1
    minor: 0
  arma_2_arrowhead:
    major: 1
    minor: 50
  take_on_helicopters:
    major: 1
    minor: 0
  arma_3:
    major: 0
    minor: 50
examples:
- "private _allEnemiesKilled = true;\nif (alive player && _allEnemiesKilled) then\n{\n\thint \"you win !\";\n};"
- "if ((count _array > 0) && { (_array select 0) == player }) then // an error would be thrown without lazy evaluation\n{\n\thint \"It works!\";\n};"
- "if ((alive player) && { player setDamage 0.5; true }) then // valid AS LONG AS the code block returns a Boolean\n{\n\thint \"It works!\";\n};"
