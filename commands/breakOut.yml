name: breakOut
description: |-
  Breaks out of the [[Variables#Scopes|scope]] with given '''name'''.
  * An unknown [[scopeName]] name will cause the script error {{hl|Generic error in expression}}
  * If multiple scopes with the same '''name''' exist, the command will break out the nearest scope. See {{Link|#Example 3}}.
groups:
- Program Flow
syntax:
- call: !Unary name
  ret:
  - Nothing
  - null
  params:
  - name: name
    description: name of the scope which was previously set with [[scopeName]]. <sqf inline>""</sqf> will exit the current scope (see also [[exitWith]])
    type: String
- call: !Binary
  - value
  - name
  ret:
  - Anything
  - will return '''value'''
  params:
  - name: value
    description: a value to return
    type: Anything
  - name: name
    description: name of the scope which was previously set with [[scopeName]]. <sqf inline>""</sqf> will exit the current scope (see also [[exitWith]])
    type: String
  since:
    arma_3:
      major: 1
      minor: 48
argument_loc: Unspecified
effect_loc: Unspecified
since:
  armed_assault:
    major: 1
    minor: 0
  arma_2:
    major: 1
    minor: 0
  arma_2_arrowhead:
    major: 1
    minor: 50
  take_on_helicopters:
    major: 1
    minor: 0
  arma_3:
    major: 0
    minor: 50
examples:
- "<sqf>scopeName \"main\";\nwhile { true } do {\n\tscopeName \"loop1\";\n\twhile {true} do {\n\t\tscopeName \"loop2\";\n\t\tif (condition1) then {breakTo \"main\"}; // Breaks all scopes and return to \"main\"\n\t\tif (condition2) then {breakOut \"loop2\"}; // Breaks scope named \"loop2\"\n\t\tsleep 1;\n\t};\n\tsleep 1;\n};</sqf>"
- "<sqf>call {\n\tscopeName \"main\";\n\tcall {\n\t\t123 breakOut \"main\"\n\t};\n\t345\n}; // call returns 123</sqf>"
- "<sqf>call {\n\tscopeName \"Main\"; // Parent Main\n\tcall {\n\t\tscopeName \"Main\"; // Child Main\n\t\t\"String\" breakOut \"Main\"; // Will break out of child main and return \"String\" to parent main\n\t};\n};</sqf>"
