name: try
description: |-
  Defines a try-catch structure. This sets up an [[Exception handling|exception handling]] block. Any thrown exception in a try block is caught in a [[catch]] block. The structured exception block has the following form:
  <sqf>try
  { /* block that can throw exception */ }
  catch
  { /* block that processes the exception. Exception is described in the _exception variable */ };</sqf>
groups:
- Program Flow
syntax:
- call: !Unary code
  ret:
  - Unknown
  - null
  params:
  - name: code
    type: Unknown
- call: !Binary
  - args
  - code
  ret:
  - Unknown
  - null
  params:
  - name: args
    description: passed arguments, will be put in ''_this'' variable inside the "code"
    type: Unknown
  - name: code
    type: Unknown
  since:
    arma_3:
      major: 1
      minor: 54
argument_loc: Unspecified
effect_loc: Unspecified
since:
  armed_assault:
    major: 1
    minor: 0
  arma_2:
    major: 1
    minor: 0
  arma_2_arrowhead:
    major: 1
    minor: 50
  take_on_helicopters:
    major: 1
    minor: 0
  arma_3:
    major: 0
    minor: 50
examples:
- try { throw "invalid argument" } catch { hint str _exception };
- 123 try { if (_this != 123) throw "invalid argument" } catch { hint str _exception };
- "try {\n\tif (a > b) throw \"Error: some error\"; // OK\n\t// the command argument is static\n} catch {\n\thint str _exception;\n};\n\ntry {\n\t_someFunc = {\n\t\t// ...\n\t};\n\tif (a > b) throw (call _someFunc); // NOT OK\n\t// the command argument is dynamic\n\t// _someFunc is called first to get the value regardless of (a > b) outcome\n} catch {\n\thint str _exception;\n};\n\ntry {\n\t_someFunc = {\n\t\t// ...\n\t};\n\tif (a > b) then {throw (call _someFunc)}; // OK\n\t// the command argument is dynamic\n\t// _someFunc is only called when (a > b) is true\n} catch {\n\thint str _exception;\n};\n"
