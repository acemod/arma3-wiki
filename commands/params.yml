name: params
description: |-
  Parses input argument into array of [[private]] variables. When used without argument, as shown in main syntax, internal variable [[Magic Variables#this|_this]], which is usually available inside functions and event handlers, is used as argument.<br><br>
  In addition to simple parsing directly into variables, input can be tested in case it is undefined, of the wrong type or of the wrong size (if array) and substituted if necessary with default values. Since Arma 3 v1.54, onscreen errors are displayed for when the input is of the wrong type or size.
  {{Feature|Warning| All variables names must start with underscore and be enclosed in quotes: {{hl|c= [[params]] [<span style{{=}}"color:red;font-weight:bold">"_</span>myVar1<span style{{=}}"color:red;font-weight:bold">"</span>, <span style{{=}}"color:red;font-weight:bold">"_</span>myVar2<span style{{=}}"color:red;font-weight:bold">"</span>];}}
  }}
  {{Feature|Informative| It is a good practice to make your local variables '''private''' (through [[private]] or [[params]]) in order to avoid overwriting a local variable of the same name.}}
groups:
- Variables
- Arrays
syntax:
- call: !Unary
  - element1
  - element2
  - '...'
  ret:
  - Unknown
  - '[[false]] if error occurred or default value has been used, otherwise [[true]]'
  params:
  - name: elementN
    description: |-
      name of a [[private]] variable (must begin with underscore _, e.g. "_myVar")
      ** defaultValue: [[Anything]] - default value to return if input element is undefined, of the wrong type or of the wrong size (if array).
      ** expectedDataTypes: [[Array]] of direct [[:Category: Data Types|Data Types]] -  checks if passed value is one of listed Data Types. If not, default value is used instead. Empty array [] means every data type is accepted.
      ** expectedArrayCount: [[Number]] or [[Array]] -  a single size or array of sizes. If passed input value is an array, checks that it has a certain number of elements. If not, default value is used instead. Empty array [] means any size is accepted.
    type: Unknown
    optional: true
- call: !Binary
  - argument
  - - element1
    - element2
    - '...'
  ret:
  - Unknown
  - '[[false]] if error occurred or default value has been used, otherwise [[true]]'
  params:
  - name: argument
    description: a usual array of params is expected. If a non-array argument is passed, it will be converted to 1 element array
    type: Unknown
  - name: elementN
    description: |-
      name of a [[private]] variable (must begin with underscore _, e.g. "_myVar")
      ** defaultValue: [[Anything]] - default value to return if input element is undefined, of the wrong type or of the wrong size (if array).
      ** expectedDataTypes: [[Array]] of direct [[:Category: Data Types|Data Types]] -  checks if passed value is one of listed Data Types. If not, default value is used instead. Empty array [] means every data type is accepted.
      ** expectedArrayCount: [[Number]] or [[Array]] -  a single size or array of sizes. If passed input value is an array, checks that it has a certain number of elements. If not, default value is used instead. Empty array [] means any size is accepted.
    type: Unknown
    optional: true
argument_loc: Unspecified
effect_loc: Unspecified
since:
  arma_3:
    major: 1
    minor: 48
examples:
- "[1, 2, 3] call {\n\tprivate [\"_one\", \"_two\", \"_three\"];\n\t_one = _this select 0;\n\t_two = _this select 1;\n\t_three = _this select 2;\n\t// ...\n};\n\n// Same as above, only using params\n[1, 2, 3] call {\n\tparams [\"_one\", \"_two\", \"_three\"];\n\t// ...\n};"
- "[123] call {\n\tparams [\"_myvar\"];\n};\n\n// Below would produce the same result as above\n123 call {\n\tparams [\"_myvar\"];\n};"
- "position player params [\"\", \"\", \"_z\"];\nif (_z > 10) then {\n\thint \"YOU ARE FLYING!\";\n};"
- |-
  [1, nil, 2] params ["_var1", "_var2", "_var3"];
  // All 3 variables are made private but only _var1 and _var3 are defined

  [1, nil, 2] params ["_var1", ["_var2", 23], "_var3"];
  // All 3 variables are private and defined
- "[1, 2] call {\n\tif (!params [\"_var1\", \"_var2\", [\"_var3\", true, [true]]]) exitWith {\n\t\thint str [_var1, _var2, _var3];\n\t};\n};\n// The hint shows [1,2,true]\n// Script exits, default value was used due to missing value\n\n[1, 2, 3] call {\n\tif (!params [\"_var1\", \"_var2\", [\"_var3\", true, [true]]]) exitWith {\n\t\thint str [_var1, _var2, _var3];\n\t};\n};\n// The hint shows [1,2,true]\n// Script exits, default value was used due incorrect value type\n"
- "[1, \"ok\", [1, 2, 3]] call {\n\tif (!params [\n\t\t[\"_var1\", 0, [0]],\n\t\t[\"_var2\", \"\", [\"\"]],\n\t\t[\"_var3\", [0,0,0], [[], objNull, 0], [2,3]]\n\t]) exitWith {};\n\thint \"ok\";\n};\n// Passes validation\n\n[1, 2, [3, 4, 5]] call {\n\tif (!params [\"_var1\", \"_var2\", [\"_var3\", [], [[], objNull, 0], 0]]) exitWith {};\n\thint \"ok\";\n};\n// Fails, because passed array is expected to be of 0 length, i.e. empty\n"
- "[1, 2, 3, [4, 5, 6]] call {\n\tparams [\"_one\", \"_two\", \"_three\"];\n\t_this select 3 params [\"_four\", \"_five\", \"_six\"];\n};"
- "{\n\t_x params [\"_group\", \"_index\"];\n\t// ...\n} forEach waypoints group player;\n\nfn_someFnc = {\n\tparams [\"_position\", [\"_direction\", 0], [\"_name\", \"\"]];\n\t// Extract the x, y, and z from \"_position\" array:\n\t_position params [\"_x\", \"_y\", \"_z\"];\n\t// ...\n};\n\n[position player, direction player, name player] call fn_someFnc;\n"
- "player addEventHandler [\"HitPart\", {\n\t_this select 0 params [\"_target\", \"_shooter\", \"_projectile\"];\n}];\n"
