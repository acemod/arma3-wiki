name: isEqualTo
description: |-
  Performs strict comparison between var1 and var2 and returns [[true]] if equal, otherwise [[false]]. Strict means that it would check that both arguments are of the same data type and then compare the values.<br><br>
  Some differences between [[isEqualTo]] and [[==]]:
  * It performs case sensitive comparison on [[String]]s
  * It doesn't throw error when comparing different types, i.e. ("eleven" [[isEqualTo]] 11)
  * It can compare [[Array]]s, [[Script Handle]]s and [[Boolean]]s ([[alive]] [[player]] [[isEqualTo]] [[true]])
  * It can compare non-existent game objects ([[grpNull]] [[isEqualTo]] [[grpNull]])
  * It is slightly faster than [[==]], especially when comparing [[String]]s
  * {{GVI|arma3|1.48|size= 0.75}} It can compare [[Namespace]]s

  {{Feature|informative|A compiled code is not equal to the same compiled code made final: <sqf>_a = compile "123"; _b = compileFinal "123"; _a isEqualTo _b; // false</sqf>}}
  {{Feature|warning|When comparing [[Array]]s, if an array contains [[nil]] element, the comparison will return [[false]]. For example:<br>
  <sqf>
  private _array1 = [1, nil, 2];
  private _array2 = [1, nil, 2];
  _array1 isEqualTo _array2; // false
  </sqf>
  <u>UNLESS</u> the compared arrays are the same array:
  <sqf>
  private _array1 = [1, nil, 2];
  private _array2 = _array1;
  _array1 isEqualTo _array2; // true
  </sqf>
  See: [[isEqualRef]] and [[BIS_fnc_areEqual]] vs [[BIS_fnc_areEqualNotNil]]
  }}
groups:
- Variables
syntax:
- call: !Binary
  - val1
  - val2
  ret:
  - Boolean
  - null
  params:
  - name: val1
    type: Anything
  - name: val2
    type: Anything
argument_loc: Unspecified
effect_loc: Unspecified
since:
  arma_3:
    major: 1
    minor: 16
examples:
- |-
  <sqf>
  _arr1 = [1, [2, [3]]];
  _arr2 = [1, [2, [3]]];
  if (_arr1 isEqualTo _arr2) then { hint "Arrays match!" };
  </sqf>
- |-
  <sqf>
  if (a isEqualTo b) then { hint "a is equal to b" };
  if !(a isEqualTo b) then { hint "a is not equal to b" };
  </sqf>
